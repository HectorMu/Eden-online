{{>sidebar}} 
        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">
            <!-- Main Content -->
            <div id="content">
               {{>navbar}}
                <!-- Begin Page Content -->
                <div class="container-fluid">
                    <!-- Page Heading -->
                    <div class="d-sm-flex align-items-center justify-content-between mb-4">
                        <h1 class="h3 mb-0 text-gray-800">Control de ordenes</h1>
                         <button type="button"  data-toggle="modal" data-target="#addOrderModal" class="btn btn-primary btn-sm d-none d-md-block d-lg-block d-xl-block "><i class="fas fa-plus"></i> Nueva orden</button>
                        <div class="fixed-button d-lg-none d-md-none d-xl-none">
                            <button type="button"  data-toggle="modal" data-target="#addOrderModal" class="btn btn-primary btn-sm"><i class="fas fa-plus"></i> Nueva orden</button>
                        </div>
                    </div>
                     <div class="input-group my-4">
                            <input type="text" id="searchInput" class="form-control bg-light small" placeholder="Buscar por No. de Orden..."
                                aria-label="Search" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="button">
                                    <i class="fas fa-search fa-sm"></i>
                                </button>
                            </div>
                        </div>
                    {{#if (isData orders)}}
                    {{#each orders}}
                     <div class="d-flex justify-content-end">
                     <div class="dropdown dropleft ">
                           
                    </div>
                    </div>
                    <div class="accordion" id="accordionOrder{{id}}">
                        <div class="card">
                            <div id="header{{id}}" class="card-header" data-id="{{id}}" >
                                <div class="d-flex justify-content-between">
                                     <h2 class="mb-0">
                                    <button class="btn btn-link btn-block text-left buttonorder" id="headingOrder{{id}}" data-toggle="collapse" data-target="#collapseOrder{{id}}" aria-expanded="true" aria-controls="collapseOrder{{id}}">
                                        Orden: {{id}} - Mesa: {{fk_mesa}}
                                    </button>
                                    </h2>
                                    <div class="row">
                                        <div class="col dropleft">
                                            <button class="btn btn-primary btn-sm" type="button" data-toggle="modal" data-target="#addProductModal{{id}}"><i class="fas fa-plus"></i></button>
                                             <button data-drop="{{id}}" class="btn btn-secondary btn-sm  dropOptions" type="button" id="dropdownMenuButton{{id}}" data-toggle="dropdown" aria-expanded="false">
                                                    <i class="fas fa-paper-plane"></i>
                                                </button>
                                            <div class="dropdown-menu"   aria-labelledby="dropdownMenuButton{{id}}">
                                                <button data-sendbtnid="{{id}}" class="dropdown-item sendOrder" >A Cocina y Barra</button>
                                                <button data-sendbtnid="{{id}}" class="dropdown-item sendChef" href="#">Cocina</button>
                                                <button data-sendbtnid="{{id}}" class="dropdown-item sendBarman" href="#">Barra</button>
                                            </div>
                                            <button class="btn btn-danger btn-sm" type="button" data-toggle="modal" data-target="#deleteOrderModal{{id}}"><i class="fas fa-trash"></i></button>
                                        </div>
                                    </div>
                                </div>
                    </div>
                       <div id="collapseOrder{{id}}" data-collapseid="{{id}}" class="collapse" aria-labelledby="headingOrder{{id}}" data-parent="#accordionOrder{{id}}">
                            <div data-cardBody="{{id}}" class="card-body">
                                <p data-Saletotal="{{id}}" id="total"></p>
                                <table  style="font-size: 15px;" class="table table-responsive  text-center">
                                    <thead>
                                        <tr>
                                        <th>Producto</th>
                                        <th>$</th>
                                        <th>Cant.</th>
                                        <th>Total</th>
                                        <th><i class="fas fa-cog"></i></th>
                                        </tr>
                                    </thead>
                                    <tbody class="justify-content-center" data-detailTable="{{id}}">
                                    </tbody>
                                </table>    
                            </div>
                         </div>      
                           {{>waiterComponents/orderModals/addProductOrderModal}}
                           {{>waiterComponents/orderModals/deleteOrderModal}}
                    </div>
                    </div>
                    {{/each}}
                    {{else}}
                    <div class="card card-body text-center">
                         <h3>Aun no hay ordenes registradas.</h3>
                    </div>
                    {{/if}}
                
                <!-- /.container-fluid -->
            </div>
            <!-- End of Main Content -->
          {{>footer}}
        </div>
       
<!-- End of Content Wrapper -->
<script>
    const tableSpinner = () => (`
            <div class="d-flex justify-content-center mt-2">
                 <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
                </div>
            </div>`)

    const getOrders = async (id) =>{
        const url = `/api/orderdetail/${id}`
        const response = await fetch(url);
        return response.json();
    }
    const sendToChefOrders = async (id) =>{
        const url = `/api/sendorder/${id}`
        const response = await fetch(url);
        return response.json();
    }
       const deleteProduct = async(id) =>{
        const url = `/api/order/removeproduct/${id}`
        const response = await fetch(url)
        const results = await response.json();
        return results;
    }
    const changeCuantity = async (id, newCuantity)=>{
        const url = `/api/order/changecuantity/${id}`
        const response = await fetch(url,{
            method: 'POST',
            headers: { 'Content-Type': 'application/json'},
            body:JSON.stringify({
                  cuantity: newCuantity
            })  
        })
        const results = await response.json();
        return results;
    }
     const changeColorByEstatus = (estatus)=>{
            if(estatus == 'Preparacion'){
                return 'bg-dark text-white'
            }
            if(estatus == 'Preparado'){
                return 'bg-success text-white'
            }else{
                return ""
            } 
        }
    const renderOrderDetails = async(tableBody, id)=>{
        tableBody.innerHTML = tableSpinner();
        const details = await getOrders(id)
         tableBody.innerHTML ="";
                details.map(detail =>{
                tableBody.innerHTML += 
                `<tr class="${changeColorByEstatus(detail.estatus)}">
                    <td>${detail.nombre}</td>
                    <td>${detail.precio_venta}</td>
                    <td>     
                        <input placeholder="Nueva cantidad" data-newcuantityinput="${detail.num}" type="number"  autofocus class="form-control d-none"> 
                        <div data-tdcuantity="${detail.num}">${detail.cantidad}</div> 
                    <td>${parseFloat(detail.precio_venta*detail.cantidad)} </td>
                    <td class="d-flex">
                        <button type="submit" data-productnumcuantity="${detail.num}" class="btn btn-sm btn-info btn-sm mx-1 cuantityEdit"><i class="fas fa-pen"></i></button>
                        <button type="submit" data-savecuantity="${detail.num}" class="btn btn-sm btn-info btn-sm mx-1 d-none"><i class="fas fa-check"></i></button>
                        <button type="submit" data-productnum="${detail.num}" class="btn btn-danger btn-sm deleteProduct"><i class="fas fa-window-close"></i></button>
                    </td>
                </tr>`
        })
    }
    const cardHeaders = document.querySelectorAll('.card-header')
    cardHeaders.forEach(header=>{
        header.addEventListener('click',async ()=>{
            const tableBody = document.querySelector(`[data-detailTable="${header.dataset.id}"]`)
            const pTotal = document.querySelector(`[data-Saletotal="${header.dataset.id}"]`)
            let alltotal = 0;
               await renderOrderDetails(tableBody, header.dataset.id)
                const deleteButtons = document.querySelectorAll('.deleteProduct')
                deleteButtons.forEach( button =>{
                button.addEventListener('click',async(e)=>{
                e.preventDefault();  
                let deleteConfirmation = confirm(`Â¿Eliminar producto de la orden ${header.dataset.id}?`)
                if(deleteConfirmation){
                      const results = await deleteProduct(button.dataset.productnum)
                if(results.status == "ok"){
                    const headerclicked = document.querySelector(`[data-id="${header.dataset.id}"]`)
                    headerclicked.click()
                    Toastify({
                        text: `Producto eliminado de la orden ${header.dataset.id}`,
                        className: "info text-center mt-2 w-100 toast-font",
                        position: "center",
                         gravity:"top",
                        style: {background: "#4e73df",}
                    }).showToast();   
                }else{
                    headerclicked.click()
                            Toastify({
                            text: `Algo paso, intentalo de nuevo.`,
                            className: "info text-center mt-2 w-100 toast-font",
                            position: "center",
                            gravity:"top",
                            style: {background: "red",}
                        }).showToast();  
                }
            }
            })
            })
            for (let i = 0; i < tableBody.rows.length; i++){
                    alltotal  += parseFloat(tableBody.rows[i].cells[3].textContent)
            }
            if(alltotal > 0){
                 pTotal.innerHTML = `
                 <div class="d-flex justify-content-between">
                     <p>Total de orden: ${alltotal} $ pesos</p>
                      <a href="/waiter/sendtocashier/${header.dataset.id}" class="btn btn-primary"><i class="fas fa-receipt"></i></a>
                 </div>
                  `   
            }else{
                 pTotal.innerHTML = `Esta orden aun no tiene productos.`   
            }
            const cuantityEditButtons = document.querySelectorAll('.cuantityEdit')
            cuantityEditButtons.forEach(button =>{
                button.addEventListener('click',()=>{
                const divCuantity = document.querySelector(`[data-tdcuantity="${button.dataset.productnumcuantity}"]`)
                divCuantity.classList.add('d-none')
                const newCuantityInput = document.querySelector(`[data-newcuantityinput="${button.dataset.productnumcuantity}"]`)
                newCuantityInput.classList.remove('d-none')
                newCuantityInput.value = divCuantity.textContent
                const saveCuantityBtn = document.querySelector(`[data-savecuantity="${button.dataset.productnumcuantity}"]`)
                saveCuantityBtn.classList.remove('d-none')
                saveCuantityBtn.addEventListener('click',async()=>{
                    const headerclicked = document.querySelector(`[data-id="${header.dataset.id}"]`)
                    let confirmCuantityEdit = confirm(`Â¿Guardar cambios en la orden ${header.dataset.id}`)
                    if(confirmCuantityEdit){
                        const results = await changeCuantity(button.dataset.productnumcuantity, newCuantityInput.value)
                        if(results.status == "ok"){
                            headerclicked.click()
                            Toastify({
                            text: `Cantidad cambiada correctamente`,
                            className: "info text-center mt-2 w-100 toast-font",
                            position: "center",
                            gravity:"top",
                            style: {background: "#4e73df",}
                        }).showToast();   
                    }else{
                        headerclicked.click()
                            Toastify({
                            text: `Algo paso, intentalo de nuevo.`,
                            className: "info text-center mt-2 w-100 toast-font",
                            position: "center",
                            gravity:"top",
                            style: {background: "red",}
                        }).showToast();  
                    }
                    }       
                })
                button.classList.add('d-none')
                })
            })
        })
    })
    const sendButtons = document.querySelectorAll('.sendOrder')
            sendButtons.forEach(button =>{
                button.addEventListener('click',async(e)=>{
                    e.preventDefault();
                    const results = await sendToChefOrders(button.dataset.sendbtnid)
                    const headerclicked = document.querySelector(`[data-id="${button.dataset.sendbtnid}"]`)
                    if(results.status == "ok"){
                          headerclicked.click()
                            Toastify({
                            text: `Productos de orden ${button.dataset.sendbtnid} enviada para preparacion.`,
                            className: "info text-center mt-2 w-100 toast-font",
                            position: "center",
                            gravity:"top",
                            style: {background: "#4e73df",}
                        }).showToast();   
                         socket.emit('clientWaiter:sendChefNewOrder',button.dataset.sendbtnid)
                         socket.emit('clientWaiter:sendBarmanNewOrder', button.dataset.sendbtnid)
                    }else{
                         headerclicked.click()
                            Toastify({
                            text: `Algo paso, intentalo de nuevo.`,
                            className: "info text-center mt-2 w-100 toast-font",
                            position: "center",
                            gravity:"top",
                            style: {background: "red",}
                        }).showToast();   
                    }
                })
            })
            const sendChefButtons = document.querySelectorAll('.sendChef')
            sendChefButtons.forEach(button => {
            button.addEventListener('click', async (e) => {
                e.preventDefault();
                const results = await sendToChefOrders(button.dataset.sendbtnid)
                const headerclicked = document.querySelector(`[data-id="${button.dataset.sendbtnid}"]`)
                if (results.status == "ok") {
                    headerclicked.click()
                    Toastify({
                        text: `Platillos de orden ${button.dataset.sendbtnid} enviada para preparacion.`,
                        className: "info text-center mt-2 w-100 toast-font",
                        position: "center",
                        gravity: "top",
                        style: { background: "#4e73df", }
                    }).showToast();
                    socket.emit('clientWaiter:sendChefNewOrder', button.dataset.sendbtnid)
                } else {
                    headerclicked.click()
                    Toastify({
                        text: `Algo paso, intentalo de nuevo.`,
                        className: "info text-center mt-2 w-100 toast-font",
                        position: "center",
                        gravity: "top",
                        style: { background: "red", }
                    }).showToast();
                }
            })
        })
         const sendBarmanButtons = document.querySelectorAll('.sendBarman')
        sendBarmanButtons.forEach(button => {
            button.addEventListener('click', async (e) => {
                e.preventDefault();
                const results = await sendToChefOrders(button.dataset.sendbtnid)
                const headerclicked = document.querySelector(`[data-id="${button.dataset.sendbtnid}"]`)
                if (results.status == "ok") {
                    headerclicked.click()
                    Toastify({
                        text: `Bebidas de orden ${button.dataset.sendbtnid} enviada para preparacion.`,
                        className: "info text-center mt-2 w-100 toast-font",
                        position: "center",
                        gravity: "top",
                        style: { background: "#4e73df", }
                    }).showToast();
                    socket.emit('clientWaiter:sendBarmanNewOrder', button.dataset.sendbtnid)
                } else {
                    headerclicked.click()
                    Toastify({
                        text: `Algo paso, intentalo de nuevo.`,
                        className: "info text-center mt-2 w-100 toast-font",
                        position: "center",
                        gravity: "top",
                        style: { background: "red", }
                    }).showToast();
                }
            })
        })
        const dropButtons = document.querySelectorAll('.dropOptions')
        dropButtons.forEach(button =>{
            button.addEventListener('click',()=>{
                const header = document.getElementById(`header${button.dataset.drop}`)
                header.classList.toggle('grow-height')
            })
        })
</script>
{{>waiterComponents/orderModals/addOrderModal}}
